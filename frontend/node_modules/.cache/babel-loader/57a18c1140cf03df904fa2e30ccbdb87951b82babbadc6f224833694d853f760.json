{"ast":null,"code":"// Arquivo: frontend/src/services/authService.js\n\nimport api from './api';\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Erro de conexão'\n    };\n  }\n};\nexport const registerUser = async ({\n  name,\n  email,\n  password,\n  confirmPassword\n}) => {\n  try {\n    const response = await api.post('/auth/register', {\n      name,\n      email,\n      password,\n      confirmPassword\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Erro de conexão'\n    };\n  }\n};\nexport const validateToken = async () => {\n  try {\n    const response = await api.get('/auth/validate');\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      message: 'Token inválido'\n    };\n  }\n};\nexport const refreshToken = async () => {\n  try {\n    const response = await api.post('/auth/refresh-token');\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: 'Erro ao renovar token'\n    };\n  }\n};\nexport const forgotPassword = async email => {\n  try {\n    const response = await api.post('/auth/forgot-password', {\n      email\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n      message: 'Erro ao solicitar recuperação'\n    };\n  }\n};","map":{"version":3,"names":["api","loginUser","email","password","response","post","data","error","_error$response","message","registerUser","name","confirmPassword","_error$response2","validateToken","get","_error$response3","refreshToken","_error$response4","forgotPassword","_error$response5"],"sources":["C:/Users/victo/OneDrive/Área de Trabalho/raspadinha igame/frontend/src/services/authService.js"],"sourcesContent":["// Arquivo: frontend/src/services/authService.js\r\n\r\nimport api from './api';\r\n\r\nexport const loginUser = async (email, password) => {\r\n  try {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Erro de conexão' };\r\n  }\r\n};\r\n\r\nexport const registerUser = async ({ name, email, password, confirmPassword }) => {\r\n  try {\r\n    const response = await api.post('/auth/register', {\r\n      name,\r\n      email,\r\n      password,\r\n      confirmPassword\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Erro de conexão' };\r\n  }\r\n};\r\n\r\nexport const validateToken = async () => {\r\n  try {\r\n    const response = await api.get('/auth/validate');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Token inválido' };\r\n  }\r\n};\r\n\r\nexport const refreshToken = async () => {\r\n  try {\r\n    const response = await api.post('/auth/refresh-token');\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Erro ao renovar token' };\r\n  }\r\n};\r\n\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    const response = await api.post('/auth/forgot-password', { email });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Erro ao solicitar recuperação' };\r\n  }\r\n};"],"mappings":"AAAA;;AAEA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAkB,CAAC;EAC9D;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAO;EAAEC,IAAI;EAAET,KAAK;EAAEC,QAAQ;EAAES;AAAgB,CAAC,KAAK;EAChF,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,gBAAgB,EAAE;MAChDM,IAAI;MACJT,KAAK;MACLC,QAAQ;MACRS;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAM,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAN,KAAK,CAACH,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgBP,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAkB,CAAC;EAC9D;AACF,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACe,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAS,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAT,KAAK,CAACH,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAiB,CAAC;EAC7D;AACF,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,qBAAqB,CAAC;IACtD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAW,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAX,KAAK,CAACH,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBZ,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAwB,CAAC;EACpE;AACF,CAAC;AAED,OAAO,MAAMU,cAAc,GAAG,MAAOjB,KAAK,IAAK;EAC7C,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,uBAAuB,EAAE;MAAEH;IAAM,CAAC,CAAC;IACnE,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAa,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAb,KAAK,CAACH,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAI;MAAEG,OAAO,EAAE;IAAgC,CAAC;EAC5E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}